buildscript {
    ext.ver_crashlytics = '2.9.4' // https://docs.fabric.io/android/changelog.html#crashlytics
    ext.ver_fabricPlugin = '1.25.4' // https://docs.fabric.io/android/changelog.html#fabric-gradle-plugin

    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.3'
        classpath "io.fabric.tools:gradle:${ver_fabricPlugin}"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:all'
        options.compilerArgs << '-Xlint:-deprecation'
        options.compilerArgs << '-Xlint:-unchecked'
    }
}

// task clean(type: Delete) {
//     delete rootProject.buildDir
// }

apply plugin: 'com.android.application'

if (getGradle().getStartParameter().getTaskRequests().toString().contains("Withanalytics")){
    apply plugin: 'io.fabric'
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    externalNativeBuild {
        cmake {
            path 'src/main/jni/CMakeLists.txt'
        }
    }

    defaultConfig {
        //noinspection MinSdkTooLow
        minSdkVersion 9 // min 9 for fabric

        targetSdkVersion 27

        versionName '2018.07.02'
        versionCode 1807020000
    }

    if (new File('tools/signing.properties').exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(file('tools/signing.properties')))

        signingConfigs {
            release {
                storeFile file('tools/signing.keystore')
                keyAlias props['keyAlias']
                storePassword props['storePassword']
                keyPassword props['keyPassword']
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }
    }

    flavorDimensions 'package', 'difficulty', 'analytics', 'zeemote', 'rateoffer'

    productFlavors {
        gplaynormal {
            dimension 'package'
            applicationId 'zame.GloomyDungeons.freedemo.game'
        }

        gplayhardcore {
            dimension 'package'
            applicationId 'org.zamedev.gloomydungeons1hardcore.gplay'
        }

        fdroidnormal {
            dimension 'package'
            applicationId 'zame.GloomyDungeons.opensource.game'
        }

        fdroidhardcore {
            dimension 'package'
            applicationId 'org.zamedev.gloomydungeons1hardcore.opensource'
        }

        normal {
            dimension 'difficulty'
        }

        hardcore {
            dimension 'difficulty'
        }

        withoutanalytics {
            dimension 'analytics'
        }

        withanalytics {
            dimension 'analytics'
        }

        withoutzeemote {
            dimension 'zeemote'
        }

        withzeemote {
            dimension 'zeemote'
        }

        withoutrateoffer {
            dimension 'rateoffer'
        }

        withrateoffer {
            dimension 'rateoffer'
        }
    }

    externalNativeBuild {
        cmake {
            path 'src/main/cpp/CMakeLists.txt'
        }
    }
}

dependencies {
    withanalyticsImplementation("com.crashlytics.sdk.android:crashlytics:${ver_crashlytics}@aar") {
        transitive = true
    }

    withzeemoteImplementation fileTree(dir: 'src/withzeemote/libs', include: [ '*.jar' ])
}
